{"version":3,"sources":["ng://ng-solcre-auth/lib/access-token.model.ts","ng://ng-solcre-auth/lib/environment.ts","ng://ng-solcre-auth/lib/solcre-auth-library.service.ts","ng://ng-solcre-auth/lib/auth.component.ts","ng://ng-solcre-auth/lib/auth.module.ts","ng://ng-solcre-auth/lib/auth-guard-service.ts","ng://ng-solcre-auth/lib/auth.interceptor.ts"],"names":["AccessTokenModel","token","refreshToken","expiration","this","environment","AuthService","router","httpClient","localStorageService","searchingCode","EventEmitter","codeNotFound","prototype","isAuthenticated","get","login","email","password","_this","username","split","post","codeDomain","client_id","grant_type","subscribe","response","set","console","log","navigate","accessToken","parseAccessToken","error","message","detail","logout","remove","getAccessToken","setCode","domain","emit","params","HttpParams","code","getCode","obj","access_token","Date","setMinutes","getMinutes","expires_in","refresh_token","Injectable","args","providedIn","Router","HttpClient","LocalStorageService","SolcreAuthLibraryComponent","formBuilder","authService","ngOnInit","signinForm","group","control","Validators","required","state","onSubmit","value","onBlur","invalid","indexOf","Component","selector","template","FormBuilder","AuthModule","NgModule","declarations","imports","LocalStorageModule","CommonModule","FormsModule","HttpClientModule","ReactiveFormsModule","exports","providers","AuthGuard","canActivate","route","AuthInterceptor","isRefreshingToken","tokenSubject","BehaviorSubject","intercept","req","next","handle","pipe","catchError","caught","HttpErrorResponse","status","handle400Error","handle401Error","handle403Error","Observable","addToken","clone","setHeaders","Authorization","throwError","url"],"mappings":"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","sourcesContent":["export class AccessTokenModel {\n    constructor(\n        public token: string,\n        public refreshToken: string,\n        public expiration: Date\n    ) { }\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiURL: \"https://api.columnis.com/\",\n  codeURI: \"001/columnis/clients\",\n  oauthURI: '/oauth',\n  userGroupsURI: '/columnis/user_groups',\n  permissionsURI: '/columnis/permissions',\n  usersURI: '/columnis/users'\n\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { LocalStorageService } from 'angular-2-local-storage';\nimport { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { EventEmitter } from '@angular/core';\nimport { AccessTokenModel } from './access-token.model';\nimport { Injectable } from '@angular/core';\nimport { environment } from './environment';\n\n@Injectable({ //duda\n  providedIn: 'root'\n})\nexport class AuthService {\n\n    codeDomain: string;\n    public searchingCode: EventEmitter<boolean> = new EventEmitter();\n    public codeNotFound: EventEmitter<boolean> = new EventEmitter();\n\n    private accessToken: AccessTokenModel;\n\n    constructor(\n        private router: Router,\n        private httpClient: HttpClient,\n        private localStorageService: LocalStorageService\n    ) { }\n\n    public isAuthenticated() {\n        let currentUser = this.localStorageService.get('access_token');\n        if (currentUser) {\n            return true;\n        };\n        return false;\n    }\n\n    public login(email: string, password: string) {\n        let username = email.split(\"@\");\n\n        this.httpClient.post(environment.apiURL + this.codeDomain + environment.oauthURI, {\n            \"client_id\": \"columnis_manager\",\n            \"grant_type\": \"password\",\n            \"username\": username[0],\n            \"password\": password\n        }).subscribe(\n            (response: any) => {\n                this.localStorageService.set('code', this.codeDomain);\n                this.localStorageService.set('access_token', response['access_token']);\n\n                // this.localStorageService.set('refresh_token', response['refresh_token']);\n                console.log(\"Logged in\", response);\n                this.router.navigate(['/']);\n                this.accessToken = this.parseAccessToken(response);\n            },\n            (error: HttpErrorResponse) => {\n                let message: string;\n                // this.translateService.get('share.dialog.errorPassword').subscribe(response => {\n                //     message = response;\n                // });\n                console.log(message);\n                console.log(error.error.detail);\n            }\n\n\n        );\n    }\n\n    public logout() {\n        // this.localStorageService.clearAll();\n        this.localStorageService.remove('access_token');\n        this.localStorageService.remove('code');\n        this.router.navigate(['/oauth']);\n    }\n\n    public getAccessToken(): string {\n        return this.localStorageService.get('access_token');\n    }\n\n\n    public setCode(domain: string) {\n        this.searchingCode.emit(true);\n        if (this.localStorageService.get(domain)) {\n            console.log(\"desde ls\");\n            this.codeNotFound.emit(false);\n            this.searchingCode.emit(false);\n            this.codeDomain = this.localStorageService.get(domain);\n        } else {\n            let params = new HttpParams().set('domain', domain);\n            this.httpClient.get(environment.apiURL + environment.codeURI, { params }).subscribe((response: any) => {\n                this.codeDomain = response.code;\n                if (!((this.codeDomain) == '000')) {\n                    this.localStorageService.set(domain, this.codeDomain);\n                    this.searchingCode.emit(false); //si encuentra un codigo\n                } else {\n                    this.searchingCode.emit(false); //si no encuentra\n                    this.codeNotFound.emit(true);\n                }\n            }, (error: HttpErrorResponse) => {\n                this.searchingCode.emit(false); //si no encuentra\n                this.codeNotFound.emit(true);\n                console.log(error);\n            });\n        }\n    }\n\n    public getCode(): string {\n        return this.localStorageService.get('code');\n    }\n\n    private parseAccessToken(obj: any): AccessTokenModel {\n        let accessToken: AccessTokenModel = null;\n\n        //Check access token\n        if (obj && obj.access_token) {\n            //parse expiration date\n            let expiration = new Date();\n            expiration.setMinutes(expiration.getMinutes() + (obj.expires_in / 60));\n\n            //Creates the access token model\n            accessToken = new AccessTokenModel(\n                obj.access_token,\n                obj.refresh_token,\n                expiration\n            );\n        }\n        console.log(accessToken);\n        return accessToken;\n    }\n\n}","import { Component, OnInit } from '@angular/core';\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\nimport { AuthService } from './solcre-auth-library.service';\n@Component({\n  selector: 'lib-auth-library',\n  templateUrl: './login.component.html',\n  styles: [] //syles broken the library\n})\nexport class SolcreAuthLibraryComponent implements OnInit {\n\n  signinForm: FormGroup;\n  searchingCode: boolean;\n  codeNotFound: boolean;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n  ) { }\n\n  ngOnInit() {\n    this.signinForm = this.formBuilder.group({\n      'email': this.formBuilder.control(null, [Validators.required, Validators.email]),\n      'password': this.formBuilder.control(null, Validators.required)\n    });\n    this.authService.codeNotFound.subscribe((state: boolean) => {\n      this.codeNotFound = state;\n    });\n    this.authService.searchingCode.subscribe((state: boolean) => {\n      this.searchingCode = state;\n    });\n  }\n\n  onSubmit() {\n    this.authService.login(this.signinForm.value.email, this.signinForm.value.password);\n  }\n\n  onBlur() {\n    this.codeNotFound = false;\n    this.searchingCode = false;\n    this.signinForm.invalid;\n    if (this.signinForm.value.email && this.signinForm.value.email.indexOf('@') > -1) {\n      let data: string = (this.signinForm.value.email).split(\"@\", 2);\n      let domain: string = data[1];\n      this.authService.setCode(domain);\n    }\n  }\n}\n","import { NgModule } from \"@angular/core\";\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthService } from './solcre-auth-library.service';\nimport { AuthGuard } from './auth-guard-service';\nimport { SolcreAuthLibraryComponent } from './auth.component';\nimport { CommonModule } from '@angular/common';\nimport { LocalStorageModule } from 'angular-2-local-storage';\n\n@NgModule({\n    declarations: [\n        SolcreAuthLibraryComponent,\n    ], \n    imports: [\n        LocalStorageModule,\n        CommonModule,\n        FormsModule,\n        HttpClientModule,\n        ReactiveFormsModule,\n    ],\n    exports: [\n        SolcreAuthLibraryComponent\n    ],\n    providers: [\n        AuthService,\n    ]\n})\nexport class AuthModule { } ","import { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { AuthService } from './solcre-auth-library.service';\n\n\n@Injectable({ //duda\n    providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n    constructor(private authService: AuthService, private router: Router) { }\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {\n       if (this.authService.isAuthenticated()) {\n            return true;\n        } else {\n            this.router.navigate(['/oauth']);\n        }\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { \n    HttpEvent, \n    HttpInterceptor, \n    HttpHandler, \n    HttpRequest,\n\tHttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, take, switchMap, finalize } from 'rxjs/operators';\nâ\nimport { AuthService } from './solcre-auth-library.service';\n// âimport { AccessTokenModel } from './access-token.model';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n    isRefreshingToken: boolean = false;\n    tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(null);\nâ\n    constructor(\n        private authService: AuthService) { }\nâ\n    \n    //Intercep method\n    public intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        // Pass on the cloned request instead of the original request.\n        return next.handle(req)\n            .pipe(\n\t\t\t\tcatchError((error, caught) => {\n\t\t\t\t\t//Check error type\n\t\t\t\t\tif (error instanceof HttpErrorResponse) {\n                        console.log(error);\n                        switch (error.status) {\n\t\t\t\t\t\t\tcase 400:\n\t\t\t\t\t\t\t\treturn this.handle400Error(error);\n\t\t\t\t\t\t\tcase 401:\n\t\t\t\t\t\t\t\treturn this.handle401Error(error, req, next);\n\t\t\t\t\t\t\tcase 403:\n\t\t\t\t\t\t\t\treturn this.handle403Error(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn new Observable<HttpEvent<any>>();\n\t\t\t\t})\n\t\t\t) as any;\n    }\nâ\n    //Add authorization header to requests\n    private addToken(req: HttpRequest<any>, token: string): HttpRequest<any> {\n        return req.clone({ \n            setHeaders: { \n                Authorization: 'Bearer ' + token \n            }\n        });\n    }\nâ\n    //Helper function when the refresh token doesnt work\n    private logout(error: string){\n        //logout users, redirect to login page\n        this.authService.logout();\n        return throwError(error);\n    }\nâ\n    //Handle 403 error\n    private handle403Error(error: HttpErrorResponse) {\n        return this.logout(error.message);\n    }\nâ\n    //Hanfle 401 error\n    private handle401Error(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler) {\n        //@@TODO: find a way to configure it\n        //Ignore 401 status when the url are Oauth\n        if(req.url.indexOf('/oauth') > -1){\n            return throwError(error);\n        }\n        return this.logout(error.message);\nâ       \n    }\nâ\n    //Handle 400 error\n    private handle400Error(error:HttpErrorResponse) {\n        if (error \n            && error.status === 400 \n            && error.error \n            && error.error.error === 'invalid_grant') {\n            // If we get a 400 and the error message is 'invalid_grant', the token is no longer valid so logout.\n            return this.logout(error.message);\n        }\n        \n        //Normal flow\n        return throwError(error);\n    }\n}"]}