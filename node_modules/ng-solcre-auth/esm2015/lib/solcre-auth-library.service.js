/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocalStorageService } from 'angular-2-local-storage';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Router } from '@angular/router';
import { EventEmitter } from '@angular/core';
import { AccessTokenModel } from './access-token.model';
import { Injectable } from '@angular/core';
import { environment } from './environment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common/http";
import * as i3 from "angular-2-local-storage";
export class AuthService {
    /**
     * @param {?} router
     * @param {?} httpClient
     * @param {?} localStorageService
     */
    constructor(router, httpClient, localStorageService) {
        this.router = router;
        this.httpClient = httpClient;
        this.localStorageService = localStorageService;
        this.searchingCode = new EventEmitter();
        this.codeNotFound = new EventEmitter();
    }
    /**
     * @return {?}
     */
    isAuthenticated() {
        /** @type {?} */
        let currentUser = this.localStorageService.get('access_token');
        if (currentUser) {
            return true;
        }
        ;
        return false;
    }
    /**
     * @param {?} email
     * @param {?} password
     * @return {?}
     */
    login(email, password) {
        /** @type {?} */
        let username = email.split("@");
        this.httpClient.post(environment.apiURL + this.codeDomain + environment.oauthURI, {
            "client_id": "columnis_manager",
            "grant_type": "password",
            "username": username[0],
            "password": password
        }).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.localStorageService.set('code', this.codeDomain);
            this.localStorageService.set('access_token', response['access_token']);
            // this.localStorageService.set('refresh_token', response['refresh_token']);
            console.log("Logged in", response);
            this.router.navigate(['/']);
            this.accessToken = this.parseAccessToken(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            /** @type {?} */
            let message;
            // this.translateService.get('share.dialog.errorPassword').subscribe(response => {
            //     message = response;
            // });
            console.log(message);
            console.log(error.error.detail);
        }));
    }
    /**
     * @return {?}
     */
    logout() {
        // this.localStorageService.clearAll();
        this.localStorageService.remove('access_token');
        this.localStorageService.remove('code');
        this.router.navigate(['/oauth']);
    }
    /**
     * @return {?}
     */
    getAccessToken() {
        return this.localStorageService.get('access_token');
    }
    /**
     * @param {?} domain
     * @return {?}
     */
    setCode(domain) {
        this.searchingCode.emit(true);
        if (this.localStorageService.get(domain)) {
            console.log("desde ls");
            this.codeNotFound.emit(false);
            this.searchingCode.emit(false);
            this.codeDomain = this.localStorageService.get(domain);
        }
        else {
            /** @type {?} */
            let params = new HttpParams().set('domain', domain);
            this.httpClient.get(environment.apiURL + environment.codeURI, { params }).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                this.codeDomain = response.code;
                if (!((this.codeDomain) == '000')) {
                    this.localStorageService.set(domain, this.codeDomain);
                    this.searchingCode.emit(false); //si encuentra un codigo
                }
                else {
                    this.searchingCode.emit(false); //si no encuentra
                    this.codeNotFound.emit(true);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                this.searchingCode.emit(false); //si no encuentra
                this.codeNotFound.emit(true);
                console.log(error);
            }));
        }
    }
    /**
     * @return {?}
     */
    getCode() {
        return this.localStorageService.get('code');
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    parseAccessToken(obj) {
        /** @type {?} */
        let accessToken = null;
        //Check access token
        if (obj && obj.access_token) {
            //parse expiration date
            /** @type {?} */
            let expiration = new Date();
            expiration.setMinutes(expiration.getMinutes() + (obj.expires_in / 60));
            //Creates the access token model
            accessToken = new AccessTokenModel(obj.access_token, obj.refresh_token, expiration);
        }
        console.log(accessToken);
        return accessToken;
    }
}
AuthService.decorators = [
    { type: Injectable, args: [{
                //duda
                providedIn: 'root'
            },] }
];
/** @nocollapse */
AuthService.ctorParameters = () => [
    { type: Router },
    { type: HttpClient },
    { type: LocalStorageService }
];
/** @nocollapse */ AuthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.LocalStorageService)); }, token: AuthService, providedIn: "root" });
if (false) {
    /** @type {?} */
    AuthService.prototype.codeDomain;
    /** @type {?} */
    AuthService.prototype.searchingCode;
    /** @type {?} */
    AuthService.prototype.codeNotFound;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.accessToken;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.localStorageService;
}
//# sourceMappingURL=data:application/json;base64,