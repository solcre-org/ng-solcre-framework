/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { Observable, BehaviorSubject, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthService } from './solcre-auth-library.service';
// â€‹import { AccessTokenModel } from './access-token.model';
var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(authService) {
        this.authService = authService;
        this.isRefreshingToken = false;
        this.tokenSubject = new BehaviorSubject(null);
    }
    //Intercep method
    //Intercep method
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    AuthInterceptor.prototype.intercept = 
    //Intercep method
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // Pass on the cloned request instead of the original request.
        return (/** @type {?} */ (next.handle(req)
            .pipe(catchError((/**
         * @param {?} error
         * @param {?} caught
         * @return {?}
         */
        function (error, caught) {
            //Check error type
            if (error instanceof HttpErrorResponse) {
                console.log(error);
                switch (error.status) {
                    case 400:
                        return _this.handle400Error(error);
                    case 401:
                        return _this.handle401Error(error, req, next);
                    case 403:
                        return _this.handle403Error(error);
                }
            }
            return new Observable();
        })))));
    };
    //Add authorization header to requests
    //Add authorization header to requests
    /**
     * @private
     * @param {?} req
     * @param {?} token
     * @return {?}
     */
    AuthInterceptor.prototype.addToken = 
    //Add authorization header to requests
    /**
     * @private
     * @param {?} req
     * @param {?} token
     * @return {?}
     */
    function (req, token) {
        return req.clone({
            setHeaders: {
                Authorization: 'Bearer ' + token
            }
        });
    };
    //Helper function when the refresh token doesnt work
    //Helper function when the refresh token doesnt work
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    AuthInterceptor.prototype.logout = 
    //Helper function when the refresh token doesnt work
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        //logout users, redirect to login page
        this.authService.logout();
        return throwError(error);
    };
    //Handle 403 error
    //Handle 403 error
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    AuthInterceptor.prototype.handle403Error = 
    //Handle 403 error
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return this.logout(error.message);
    };
    //Hanfle 401 error
    //Hanfle 401 error
    /**
     * @private
     * @param {?} error
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    AuthInterceptor.prototype.handle401Error = 
    //Hanfle 401 error
    /**
     * @private
     * @param {?} error
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (error, req, next) {
        //@@TODO: find a way to configure it
        //Ignore 401 status when the url are Oauth
        if (req.url.indexOf('/oauth') > -1) {
            return throwError(error);
        }
        return this.logout(error.message);
    };
    //Handle 400 error
    //Handle 400 error
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    AuthInterceptor.prototype.handle400Error = 
    //Handle 400 error
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        if (error
            && error.status === 400
            && error.error
            && error.error.error === 'invalid_grant') {
            // If we get a 400 and the error message is 'invalid_grant', the token is no longer valid so logout.
            return this.logout(error.message);
        }
        //Normal flow
        return throwError(error);
    };
    AuthInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthInterceptor.ctorParameters = function () { return [
        { type: AuthService }
    ]; };
    return AuthInterceptor;
}());
export { AuthInterceptor };
if (false) {
    /** @type {?} */
    AuthInterceptor.prototype.isRefreshingToken;
    /** @type {?} */
    AuthInterceptor.prototype.tokenSubject;
    /**
     * @type {?}
     * @private
     */
    AuthInterceptor.prototype.authService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25nLXNvbGNyZS1hdXRoLyIsInNvdXJjZXMiOlsibGliL2F1dGguaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUtOLGlCQUFpQixFQUNqQixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsVUFBVSxFQUFxQyxNQUFNLGdCQUFnQixDQUFDO0FBRS9FLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7QUFHNUQ7SUFLSSx5QkFDWSxXQUF3QjtRQUF4QixnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUpwQyxzQkFBaUIsR0FBWSxLQUFLLENBQUM7UUFDbkMsaUJBQVksR0FBNEIsSUFBSSxlQUFlLENBQVMsSUFBSSxDQUFDLENBQUM7SUFHbEMsQ0FBQztJQUd6QyxpQkFBaUI7Ozs7Ozs7SUFDVixtQ0FBUzs7Ozs7OztJQUFoQixVQUFpQixHQUFxQixFQUFFLElBQWlCO1FBQXpELGlCQW9CQztRQW5CRyw4REFBOEQ7UUFDOUQsT0FBTyxtQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNsQixJQUFJLENBQ2IsVUFBVTs7Ozs7UUFBQyxVQUFDLEtBQUssRUFBRSxNQUFNO1lBQ3hCLGtCQUFrQjtZQUNsQixJQUFJLEtBQUssWUFBWSxpQkFBaUIsRUFBRTtnQkFDckIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbkIsUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUN2QyxLQUFLLEdBQUc7d0JBQ1AsT0FBTyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNuQyxLQUFLLEdBQUc7d0JBQ1AsT0FBTyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7b0JBQzlDLEtBQUssR0FBRzt3QkFDUCxPQUFPLEtBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Q7WUFDRCxPQUFPLElBQUksVUFBVSxFQUFrQixDQUFDO1FBQ3pDLENBQUMsRUFBQyxDQUNGLEVBQU8sQ0FBQztJQUNSLENBQUM7SUFFRCxzQ0FBc0M7Ozs7Ozs7O0lBQzlCLGtDQUFROzs7Ozs7OztJQUFoQixVQUFpQixHQUFxQixFQUFFLEtBQWE7UUFDakQsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ2IsVUFBVSxFQUFFO2dCQUNSLGFBQWEsRUFBRSxTQUFTLEdBQUcsS0FBSzthQUNuQztTQUNKLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxvREFBb0Q7Ozs7Ozs7SUFDNUMsZ0NBQU07Ozs7Ozs7SUFBZCxVQUFlLEtBQWE7UUFDeEIsc0NBQXNDO1FBQ3RDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDMUIsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELGtCQUFrQjs7Ozs7OztJQUNWLHdDQUFjOzs7Ozs7O0lBQXRCLFVBQXVCLEtBQXdCO1FBQzNDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELGtCQUFrQjs7Ozs7Ozs7O0lBQ1Ysd0NBQWM7Ozs7Ozs7OztJQUF0QixVQUF1QixLQUF3QixFQUFFLEdBQXFCLEVBQUUsSUFBaUI7UUFDckYsb0NBQW9DO1FBQ3BDLDBDQUEwQztRQUMxQyxJQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDO1lBQzlCLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVCO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV0QyxDQUFDO0lBRUQsa0JBQWtCOzs7Ozs7O0lBQ1Ysd0NBQWM7Ozs7Ozs7SUFBdEIsVUFBdUIsS0FBdUI7UUFDMUMsSUFBSSxLQUFLO2VBQ0YsS0FBSyxDQUFDLE1BQU0sS0FBSyxHQUFHO2VBQ3BCLEtBQUssQ0FBQyxLQUFLO2VBQ1gsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEtBQUssZUFBZSxFQUFFO1lBQzFDLG9HQUFvRztZQUNwRyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ3JDO1FBRUQsYUFBYTtRQUNiLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7O2dCQTVFSixVQUFVOzs7O2dCQUhGLFdBQVc7O0lBZ0ZwQixzQkFBQztDQUFBLEFBN0VELElBNkVDO1NBNUVZLGVBQWU7OztJQUN4Qiw0Q0FBbUM7O0lBQ25DLHVDQUEwRTs7Ozs7SUFHdEUsc0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgXG4gICAgSHR0cEV2ZW50LCBcbiAgICBIdHRwSW50ZXJjZXB0b3IsIFxuICAgIEh0dHBIYW5kbGVyLCBcbiAgICBIdHRwUmVxdWVzdCxcblx0SHR0cEVycm9yUmVzcG9uc2Vcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCB0aHJvd0Vycm9yIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBjYXRjaEVycm9yLCBmaWx0ZXIsIHRha2UsIHN3aXRjaE1hcCwgZmluYWxpemUgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG7igItcbmltcG9ydCB7IEF1dGhTZXJ2aWNlIH0gZnJvbSAnLi9zb2xjcmUtYXV0aC1saWJyYXJ5LnNlcnZpY2UnO1xuLy8g4oCLaW1wb3J0IHsgQWNjZXNzVG9rZW5Nb2RlbCB9IGZyb20gJy4vYWNjZXNzLXRva2VuLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gICAgaXNSZWZyZXNoaW5nVG9rZW46IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB0b2tlblN1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KG51bGwpO1xu4oCLXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhTZXJ2aWNlKSB7IH1cbuKAi1xuICAgIFxuICAgIC8vSW50ZXJjZXAgbWV0aG9kXG4gICAgcHVibGljIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgICAgICAvLyBQYXNzIG9uIHRoZSBjbG9uZWQgcmVxdWVzdCBpbnN0ZWFkIG9mIHRoZSBvcmlnaW5hbCByZXF1ZXN0LlxuICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKVxuICAgICAgICAgICAgLnBpcGUoXG5cdFx0XHRcdGNhdGNoRXJyb3IoKGVycm9yLCBjYXVnaHQpID0+IHtcblx0XHRcdFx0XHQvL0NoZWNrIGVycm9yIHR5cGVcblx0XHRcdFx0XHRpZiAoZXJyb3IgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlcnJvci5zdGF0dXMpIHtcblx0XHRcdFx0XHRcdFx0Y2FzZSA0MDA6XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuaGFuZGxlNDAwRXJyb3IoZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHRjYXNlIDQwMTpcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5oYW5kbGU0MDFFcnJvcihlcnJvciwgcmVxLCBuZXh0KTtcblx0XHRcdFx0XHRcdFx0Y2FzZSA0MDM6XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuaGFuZGxlNDAzRXJyb3IoZXJyb3IpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbmV3IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+KCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpIGFzIGFueTtcbiAgICB9XG7igItcbiAgICAvL0FkZCBhdXRob3JpemF0aW9uIGhlYWRlciB0byByZXF1ZXN0c1xuICAgIHByaXZhdGUgYWRkVG9rZW4ocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCB0b2tlbjogc3RyaW5nKTogSHR0cFJlcXVlc3Q8YW55PiB7XG4gICAgICAgIHJldHVybiByZXEuY2xvbmUoeyBcbiAgICAgICAgICAgIHNldEhlYWRlcnM6IHsgXG4gICAgICAgICAgICAgICAgQXV0aG9yaXphdGlvbjogJ0JlYXJlciAnICsgdG9rZW4gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbuKAi1xuICAgIC8vSGVscGVyIGZ1bmN0aW9uIHdoZW4gdGhlIHJlZnJlc2ggdG9rZW4gZG9lc250IHdvcmtcbiAgICBwcml2YXRlIGxvZ291dChlcnJvcjogc3RyaW5nKXtcbiAgICAgICAgLy9sb2dvdXQgdXNlcnMsIHJlZGlyZWN0IHRvIGxvZ2luIHBhZ2VcbiAgICAgICAgdGhpcy5hdXRoU2VydmljZS5sb2dvdXQoKTtcbiAgICAgICAgcmV0dXJuIHRocm93RXJyb3IoZXJyb3IpO1xuICAgIH1cbuKAi1xuICAgIC8vSGFuZGxlIDQwMyBlcnJvclxuICAgIHByaXZhdGUgaGFuZGxlNDAzRXJyb3IoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvZ291dChlcnJvci5tZXNzYWdlKTtcbiAgICB9XG7igItcbiAgICAvL0hhbmZsZSA0MDEgZXJyb3JcbiAgICBwcml2YXRlIGhhbmRsZTQwMUVycm9yKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSwgcmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcikge1xuICAgICAgICAvL0BAVE9ETzogZmluZCBhIHdheSB0byBjb25maWd1cmUgaXRcbiAgICAgICAgLy9JZ25vcmUgNDAxIHN0YXR1cyB3aGVuIHRoZSB1cmwgYXJlIE9hdXRoXG4gICAgICAgIGlmKHJlcS51cmwuaW5kZXhPZignL29hdXRoJykgPiAtMSl7XG4gICAgICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubG9nb3V0KGVycm9yLm1lc3NhZ2UpO1xu4oCLICAgICAgIFxuICAgIH1cbuKAi1xuICAgIC8vSGFuZGxlIDQwMCBlcnJvclxuICAgIHByaXZhdGUgaGFuZGxlNDAwRXJyb3IoZXJyb3I6SHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKGVycm9yIFxuICAgICAgICAgICAgJiYgZXJyb3Iuc3RhdHVzID09PSA0MDAgXG4gICAgICAgICAgICAmJiBlcnJvci5lcnJvciBcbiAgICAgICAgICAgICYmIGVycm9yLmVycm9yLmVycm9yID09PSAnaW52YWxpZF9ncmFudCcpIHtcbiAgICAgICAgICAgIC8vIElmIHdlIGdldCBhIDQwMCBhbmQgdGhlIGVycm9yIG1lc3NhZ2UgaXMgJ2ludmFsaWRfZ3JhbnQnLCB0aGUgdG9rZW4gaXMgbm8gbG9uZ2VyIHZhbGlkIHNvIGxvZ291dC5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvZ291dChlcnJvci5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy9Ob3JtYWwgZmxvd1xuICAgICAgICByZXR1cm4gdGhyb3dFcnJvcihlcnJvcik7XG4gICAgfVxufSJdfQ==