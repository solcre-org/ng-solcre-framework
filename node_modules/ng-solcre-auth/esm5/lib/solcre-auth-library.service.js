/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LocalStorageService } from 'angular-2-local-storage';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Router } from '@angular/router';
import { EventEmitter } from '@angular/core';
import { AccessTokenModel } from './access-token.model';
import { Injectable } from '@angular/core';
import { environment } from './environment';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "@angular/common/http";
import * as i3 from "angular-2-local-storage";
var AuthService = /** @class */ (function () {
    function AuthService(router, httpClient, localStorageService) {
        this.router = router;
        this.httpClient = httpClient;
        this.localStorageService = localStorageService;
        this.searchingCode = new EventEmitter();
        this.codeNotFound = new EventEmitter();
    }
    /**
     * @return {?}
     */
    AuthService.prototype.isAuthenticated = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentUser = this.localStorageService.get('access_token');
        if (currentUser) {
            return true;
        }
        ;
        return false;
    };
    /**
     * @param {?} email
     * @param {?} password
     * @return {?}
     */
    AuthService.prototype.login = /**
     * @param {?} email
     * @param {?} password
     * @return {?}
     */
    function (email, password) {
        var _this = this;
        /** @type {?} */
        var username = email.split("@");
        this.httpClient.post(environment.apiURL + this.codeDomain + environment.oauthURI, {
            "client_id": "columnis_manager",
            "grant_type": "password",
            "username": username[0],
            "password": password
        }).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.localStorageService.set('code', _this.codeDomain);
            _this.localStorageService.set('access_token', response['access_token']);
            // this.localStorageService.set('refresh_token', response['refresh_token']);
            console.log("Logged in", response);
            _this.router.navigate(['/']);
            _this.accessToken = _this.parseAccessToken(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            /** @type {?} */
            var message;
            // this.translateService.get('share.dialog.errorPassword').subscribe(response => {
            //     message = response;
            // });
            console.log(message);
            console.log(error.error.detail);
        }));
    };
    /**
     * @return {?}
     */
    AuthService.prototype.logout = /**
     * @return {?}
     */
    function () {
        // this.localStorageService.clearAll();
        this.localStorageService.remove('access_token');
        this.localStorageService.remove('code');
        this.router.navigate(['/oauth']);
    };
    /**
     * @return {?}
     */
    AuthService.prototype.getAccessToken = /**
     * @return {?}
     */
    function () {
        return this.localStorageService.get('access_token');
    };
    /**
     * @param {?} domain
     * @return {?}
     */
    AuthService.prototype.setCode = /**
     * @param {?} domain
     * @return {?}
     */
    function (domain) {
        var _this = this;
        this.searchingCode.emit(true);
        if (this.localStorageService.get(domain)) {
            console.log("desde ls");
            this.codeNotFound.emit(false);
            this.searchingCode.emit(false);
            this.codeDomain = this.localStorageService.get(domain);
        }
        else {
            /** @type {?} */
            var params = new HttpParams().set('domain', domain);
            this.httpClient.get(environment.apiURL + environment.codeURI, { params: params }).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                _this.codeDomain = response.code;
                if (!((_this.codeDomain) == '000')) {
                    _this.localStorageService.set(domain, _this.codeDomain);
                    _this.searchingCode.emit(false); //si encuentra un codigo
                }
                else {
                    _this.searchingCode.emit(false); //si no encuentra
                    _this.codeNotFound.emit(true);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.searchingCode.emit(false); //si no encuentra
                _this.codeNotFound.emit(true);
                console.log(error);
            }));
        }
    };
    /**
     * @return {?}
     */
    AuthService.prototype.getCode = /**
     * @return {?}
     */
    function () {
        return this.localStorageService.get('code');
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    AuthService.prototype.parseAccessToken = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var accessToken = null;
        //Check access token
        if (obj && obj.access_token) {
            //parse expiration date
            /** @type {?} */
            var expiration = new Date();
            expiration.setMinutes(expiration.getMinutes() + (obj.expires_in / 60));
            //Creates the access token model
            accessToken = new AccessTokenModel(obj.access_token, obj.refresh_token, expiration);
        }
        console.log(accessToken);
        return accessToken;
    };
    AuthService.decorators = [
        { type: Injectable, args: [{
                    //duda
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AuthService.ctorParameters = function () { return [
        { type: Router },
        { type: HttpClient },
        { type: LocalStorageService }
    ]; };
    /** @nocollapse */ AuthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.LocalStorageService)); }, token: AuthService, providedIn: "root" });
    return AuthService;
}());
export { AuthService };
if (false) {
    /** @type {?} */
    AuthService.prototype.codeDomain;
    /** @type {?} */
    AuthService.prototype.searchingCode;
    /** @type {?} */
    AuthService.prototype.codeNotFound;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.accessToken;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    AuthService.prototype.localStorageService;
}
//# sourceMappingURL=data:application/json;base64,